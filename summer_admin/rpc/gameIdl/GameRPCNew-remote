#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from gameIdl import GameRPCNew
from gameIdl.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  i32 charge(Order order)')
    print('  User getUserInfo(i64 userId)')
    print('  i32 exchange(Order order)')
    print('  i32 modifyMarquee(string str)')
    print('  i32 modifyDownload(string str)')
    print('  i32 modifyAndroidVersion(string str)')
    print('  i32 modifyIOSVersion(string str)')
    print('  i32 shutdown()')
    print('  i32 modifyInitMoney(i32 money)')
    print('  i32 modifyAppleCheck(i32 status)')
    print('  i32 modifyDownload2(string str)')
    print('  i32 addBlackList(i64 userId)')
    print('  i32 removeBlackList(i64 userId)')
    print('   getBlackList()')
    print('  OnlineNum getOnlineUser()')
    print('  i32 bindReferee(i64 userId, i32 referee)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = GameRPCNew.Client(protocol)
transport.open()

if cmd == 'charge':
    if len(args) != 1:
        print('charge requires 1 args')
        sys.exit(1)
    pp.pprint(client.charge(eval(args[0]),))

elif cmd == 'getUserInfo':
    if len(args) != 1:
        print('getUserInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.getUserInfo(eval(args[0]),))

elif cmd == 'exchange':
    if len(args) != 1:
        print('exchange requires 1 args')
        sys.exit(1)
    pp.pprint(client.exchange(eval(args[0]),))

elif cmd == 'modifyMarquee':
    if len(args) != 1:
        print('modifyMarquee requires 1 args')
        sys.exit(1)
    pp.pprint(client.modifyMarquee(args[0],))

elif cmd == 'modifyDownload':
    if len(args) != 1:
        print('modifyDownload requires 1 args')
        sys.exit(1)
    pp.pprint(client.modifyDownload(args[0],))

elif cmd == 'modifyAndroidVersion':
    if len(args) != 1:
        print('modifyAndroidVersion requires 1 args')
        sys.exit(1)
    pp.pprint(client.modifyAndroidVersion(args[0],))

elif cmd == 'modifyIOSVersion':
    if len(args) != 1:
        print('modifyIOSVersion requires 1 args')
        sys.exit(1)
    pp.pprint(client.modifyIOSVersion(args[0],))

elif cmd == 'shutdown':
    if len(args) != 0:
        print('shutdown requires 0 args')
        sys.exit(1)
    pp.pprint(client.shutdown())

elif cmd == 'modifyInitMoney':
    if len(args) != 1:
        print('modifyInitMoney requires 1 args')
        sys.exit(1)
    pp.pprint(client.modifyInitMoney(eval(args[0]),))

elif cmd == 'modifyAppleCheck':
    if len(args) != 1:
        print('modifyAppleCheck requires 1 args')
        sys.exit(1)
    pp.pprint(client.modifyAppleCheck(eval(args[0]),))

elif cmd == 'modifyDownload2':
    if len(args) != 1:
        print('modifyDownload2 requires 1 args')
        sys.exit(1)
    pp.pprint(client.modifyDownload2(args[0],))

elif cmd == 'addBlackList':
    if len(args) != 1:
        print('addBlackList requires 1 args')
        sys.exit(1)
    pp.pprint(client.addBlackList(eval(args[0]),))

elif cmd == 'removeBlackList':
    if len(args) != 1:
        print('removeBlackList requires 1 args')
        sys.exit(1)
    pp.pprint(client.removeBlackList(eval(args[0]),))

elif cmd == 'getBlackList':
    if len(args) != 0:
        print('getBlackList requires 0 args')
        sys.exit(1)
    pp.pprint(client.getBlackList())

elif cmd == 'getOnlineUser':
    if len(args) != 0:
        print('getOnlineUser requires 0 args')
        sys.exit(1)
    pp.pprint(client.getOnlineUser())

elif cmd == 'bindReferee':
    if len(args) != 2:
        print('bindReferee requires 2 args')
        sys.exit(1)
    pp.pprint(client.bindReferee(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
